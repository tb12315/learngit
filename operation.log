git config --global user.name "derek.tian"
git config --global user.email "807380254@qq.com"
git init--
git add--
git commit--
git status--
git log
git diff
git reset --hard commit_id--rollback the repo commit_id=(commit_id,HEAD^,HEAD^^...,HEAD~100)
git reflog
/*
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
*/

git rm 
git checkout -- test.txt //迁出版本库中的文件到工作去

/*
$ ssh-keygen -t rsa -C "youremail@example.com" //建立自己的ssh公钥私钥
//将.ssh下的id_rsa.pub内容添加到自己github账号的sshkey集合中
$ git remote add origin git@github.com:michaelliao/learngit.git //关联github远程库origin
$ git push -u origin master //将本地的master分支推送到origin

git clone git@github.com:tb12315/learngit.git//将github远程资源库clone到本地 
*/

git rm

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

/*
$ git merge --no-ff -m "merge with no-ff" dev
Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并
*/

git stash//将当前对工作区的改变储藏起来，并恢复当前分支为未修改前的状况
git stash apply;git stash drop ==git stash pop
git stash list

/*
多人协作的工作模式通常是这样:
首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。*/

/*
查看远程库信息，使用git remote -v；

本地新建的分支如果不推送到远程，对其他人就是不可见的；

从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。*/


git tag tagname//打tag
git tag//查看所有tag
git tag v0.9 6224937//对特定的版本打标签
git show tagname//查看某个tag
git tag -a v0.1 -m "version 0.1 released" 3628164//-m 对tag添加描述
git tag -s v0.2 -m "signed version 0.2 released" fec145a//-s 添加签名 使用gpg（GnuPG）签名
/*命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

git tag -a <tagname> -m "blablabla..."可以指定标签信息；

git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

命令git tag可以查看所有标签。*/

git tag -d v0.1//删除标签
git push origin <tagname>//推送某个标签到远程
git push origin --tags//一次性推送全部尚未推送到远程的本地标签

/*
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：

$ git tag -d v0.9
Deleted tag 'v0.9' (was 6224937)
然后，从远程删除。删除命令也是push，但是格式如下：
$ git push origin :refs/tags/v0.9
To git@github.com:michaelliao/learngit.git
 - [deleted]         v0.9
*/

/*
小结
命令git push origin <tagname>可以推送一个本地标签；

命令git push origin --tags可以推送全部未推送过的本地标签；

命令git tag -d <tagname>可以删除一个本地标签；

命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
*/

.gitignore文件//忽略特殊的文件
git config --global alias.st status//配置别名
配置文件//每个仓库的Git配置文件都放在.git/config文件中
当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig

